* Multiprocessing
** Introduction
#+BEGIN_SRC python :results output
import time
import multiprocessing

def calc_square(numbers):
    for n in numbers:
        print('square ' + str(n*n))

def calc_cube(numbers):
    for n in numbers:
        print('cube ' + str(n*n*n))

if __name__ == "__main__":
    arr = [2,3,8]
    p1 = multiprocessing.Process(target=calc_square, args=(arr,))
    p2 = multiprocessing.Process(target=calc_cube, args=(arr,))

    p1.start()
    p2.start()

    p1.join()
    p2.join()

    print("Done!")

#+END_SRC

#+RESULTS:
: square 4
: square 9
: square 64
: cube 8
: cube 27
: cube 512
: Done!

** Value array

#+BEGIN_SRC python :results output
import multiprocessing

def calc_square(numbers, result, v):
    v.value = 5.67
    for idx, n in enumerate(numbers):
        result[idx] = n*n

if __name__ == "__main__":
    numbers = [2,3,5]
    result = multiprocessing.Array('i',3)
    v = multiprocessing.Value('d', 0.0)
    p = multiprocessing.Process(target=calc_square, args=(numbers, result, v))

    p.start()
    p.join()

    print(v.value)
#+END_SRC

#+RESULTS:
: 5.67


** Queue pipe
#+BEGIN_SRC python :results output
import multiprocessing

def calc_square(numbers, q):
    for n in numbers:
        q.put(n*n)

if __name__ == "__main__":
    numbers = [2,3,5]
    q = multiprocessing.Queue()
    p = multiprocessing.Process(target=calc_square, args=(numbers,q))

    p.start()
    p.join()

    while q.empty() is False:
        print(q.get())
#+END_SRC

#+RESULTS:
: 4
: 9
: 25

** Lock
#+BEGIN_SRC python :results output
import time
import multiprocessing

def deposit(balance, lock):
    for i in range(100):
        time.sleep(0.01)
        lock.acquire()
        balance.value = balance.value + 1
        lock.release()

def withdraw(balance, lock):
    for i in range(100):
        time.sleep(0.01)
        lock.acquire()
        balance.value = balance.value - 1
        lock.release()

if __name__ == '__main__':
    balance = multiprocessing.Value('i', 200)
    lock = multiprocessing.Lock()
    d = multiprocessing.Process(target=deposit, args=(balance,lock))
    w = multiprocessing.Process(target=withdraw, args=(balance,lock))
    d.start()
    w.start()
    d.join()
    w.join()
    print(balance.value)
#+END_SRC

#+RESULTS:
: 200

** Pool
#+BEGIN_SRC python :results output
from multiprocessing import Pool


def f(n):
    return n*n

if __name__ == "__main__":
    p = Pool(processes=3)
    result = p.map(f,[1,2,3,4,5])
    for n in result:
        print(n)
#+END_SRC

#+RESULTS:
: 1
: 4
: 9
: 16
: 25


** Multiprocessing with TQDM
#+begin_src python
import random
import time
from multiprocessing import Lock, Manager, Pool

from tqdm import tqdm


def myfunc(a, counter, lock):
    time.sleep(random.random() / 100)
    with lock:
        counter.value += 1
    return a ** 2


if __name__ == "__main__":

    manager = Manager()
    counter = manager.Value("i", 0)
    pool = Pool(2)
    """
    for _ in tqdm(pool.imap_unordered(myfunc, range(100)), total=100):
        pass
    """
    with tqdm(total=100) as pbar:
        lock = manager.Lock()

        def update(*args, **kwargs):
            with lock:
                pbar.update()
                # tqdm.write(str(a))

        result = []
        results = []
        for i in range(pbar.total):
            res = pool.apply_async(
                myfunc, args=(i, counter, lock), kwds={}, callback=update
            )
            result.append(res)
        for res in result:
            results.append(res.get())
        print(results)
        # tqdm.write('scheduled')
        pool.close()
        pool.join()
        print(counter.value)
#+end_src
